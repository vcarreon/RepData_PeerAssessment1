low
high
hist(ppm,col="green", breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta", lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
boxplot(reg, col="wheat", main="Number of Counties in Each Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pollution, pm25~region,col="red")
boxplot(pm25~region,col="red")
boxplot(pm25~region,pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
subset(pollution, region="east")
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25,col="green")
subset((pollution, region=="west"), col="green")
subset((pollution, region=="west")$pm25, col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution,plot(latitude,pm25))
abline(h=12)
abline(h=12,lwd=2,lty=3)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
mfrow=c(1,2),mar=c(5,4,3,2,1)
par(mfrow=c(1,2),mar=c(5,4,3,2,1))
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
library(lattice)
library(datasets)
xyplot(Ozone~Wind,data=airquality)
airquality<-transform(airquality,Month=factor(Month))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
print(p)
set.seed(10) #generate randmon variables
x<-rnorm(100)
f<-rep(0:1,each=50)
y<-x+f-f*x+rnorm(100,sd=5)
f<-factor(f, labels= c("Group 1", "Group 2"))
xyplot(y~x|f,layout=c(2,1))
xyplot(y~x|f,panel= function(x,y,...) {
panel.xyplot(x,y, ...)
panel.abline(h=median(y), lty=2)
})
#Custom panel function- add regression line
xyplot(y~x|f,panel= function(x,y,...) {
panel.xyplot(x,y, ...) #first call the default panel for xyplot
panel.lmline(x,y, col=2) #Add a regression line
})
library(ggplot2)
str(mpg)
qplot(dsipl,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv) #x, y, dataframe
qplot(displ,hwy,data=mpg,geom=c("point", "smooth")) #Add a statsitic
qplot(hwy,data=mpg, fill=drv)
qplot(displ,hwy,data=mpg,facets= .~drv)
qplot(displ,hwy,data=mpg,facets= .,binwidth=2)
qplot(displ,hwy,data=mpg,facets= drv~.,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
#Axis limits
testdat<-data.frame(x=1:100,y=rnorm(100))
testdat[50,2] <-100 ##Outlier
plot(testdat$x,testdat$y,type="l",ylim=c(-3,3))
g<-ggplot(testdat,aes(x=x,y=y))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+ylim(-3,3) #change the y limits, but outlier missing
g+geom_line()+coord_cartesian(ylim=c(-3,3)) #change the y limits and outlier can be seen
library(swirl)
ls()
rm(list=ls())
siwrl()
library(swirl)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind| as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind| Month,data=airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R",local=T))
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathofile("plot2.R"),local=TRUE)
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamons$color, diamonds$cut)
table(diamonds$color, diamonds$cut)
myedit(pathtofile("myLabels.R"))
myedit("myLabels.R")
pathtofile("myLabels.R",local=TRUE)
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut, strip=FALSE, pch=20, xlab=myxlav, ylab=myylab,main=mymain)
xyplot(price~carat|color*cut, data=diamonds,strip=FALSE, pch=20, xlab=myxlav, ylab=myylab,main=mymain)
xyplot(price~carat|color*cut, data=diamonds,strip=FALSE, pch=20, xlab=myxlab, ylab=myylab,main=mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab,main=mymain)
sample(colors,10)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
Oxcc
0xcc or 0xCC
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
pw(10)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
swirl()
library(swirl)
swirl()
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg,geom=c("point", "smooth"))
qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
qplot(displ,hwy,data=mpg, color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hw,data=mpg,factes=.~drv)
qplot(displ,hw,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets= drv~.)
(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(disp,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method=lm)
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid=.~drv
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv)),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv)),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
?
1
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(caes(color=drv),size=2,alpha=1/2)+geo_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geo_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family= "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g<-ggplot(testdat,aes(x=myx,y=myy))+geom_line()
g + geom_line()
g + geom_line()+ylim(-3,3)
g + geom_line()+coord_caretesian(ylim=c(-3,3))
g + geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
ls()
rm(list=ls())
swirl()
str(diamonds)
qplot(price,data=diamonds)
rand(diamonds$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497.30)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density",color=cut)
qplot(carat,price, data=diamonds)
qplot(carat,price, data=diamonds, shape=cut)
qplot(carat,price, data=diamonds, color=cut)
qplot(carat,price, data=diamonds, color=cut,geo_smooth="lm")
qplot(carat,price, data=diamonds, color=cut,geo_smooth(method="lm")
)
qplot(carat,price, data=diamonds, color=cut,geo_smooth(method="lm"))
qplot(carat,price, data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets-formula.~cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets=formula.~cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds,aes("depth","price"))
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes("depth","price"))
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid((cut~car2))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geo_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
View(BodyWeight)
str(BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set()
?splom()
?par()
airquality = transform(airquality, Month = factor(Month))
airquality = transform(airquality, Month = factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
summary(g)
g+geom_line()
g+geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess) #returns an error
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
x<-rnorm(12, mean=rep(1:3, each=4), sd=.2)
y=rnorm(12,mean=rep(c(1,2,1),each=4),sd=.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+.05,y+.05,labels=as.character(1:12))
dataFrame=data.fram(x=x,y=y)
dist(dataFrame)
dataFrame=data.frame(x=x,y=y)
dist(dataFrame)
distxy<-dist(dataFrame)
hClustering<-hcluster(distxy)
hClustering<-hclust(distxy)
plot(hClustering)
install.packages("grDevices")
library(grDevices)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
Pal(.5)
pal(.5)
pal(seq(0, 1, len = 10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x<-rnorm(10000)
y<rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
plot(x,y,pch=19)
plot(x,y,col=rgb(0,0,0,.2),pch=19)
library(swirl)
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
6
5
11
10
9
8
7
6
5
10
11
9
8
7
6
5
4
3
2
1
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
swirl()
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis Hierarchical Clustering")
install_from_swirl("Exploratory Data Analysis")
swirl()
remove.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col=
"red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
install.packages("xtable")
setwd("~/Datasciencecoursera/RepData_PeerAssessment1")
activity<-read.csv("activity.csv")
activity<-read.csv("~/Datasciencecoursera/RepData_PeerAssessment1/activity.csv")
activity<-read.csv("~/Datasciencecoursera/RepData_PeerAssessment1/activity/activity.csv")
baseDir <- "."
dataDir <- file.path(baseDir, "data")
if(!file.exists(dataDir)) { dir.create(dataDir) }
zipFilePath <- file.path(dataDir, "activity.zip")
dateFilePath <- file.path(dataDir, "date_time_downloaded.txt")
if(!file.exists(zipFilePath)) {
zipFileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file (zipFileUrl, zipFilePath, method="curl")
DTDownloaded <- format(Sys.time(), "%Y-%b-%d %H:%M:%S")
cat (DTDownloaded, file=dateFilePath)
} else {
DTDownloaded <- scan(file=dateFilePath, what="character", sep="\n")
}
filePath <- file.path(dataDir, "activity.csv")
# unzip file if necessary
if(!file.exists(filePath)) {
unzip (zipFilePath, exdir=dataDir)
}
zipFilePath <- file.path(dataDir, "activity.zip")
dateFilePath <- file.path(dataDir, "date_time_downloaded.txt")
if(!file.exists(zipFilePath)) {
zipFileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file (zipFileUrl, zipFilePath)
DTDownloaded <- format(Sys.time(), "%Y-%b-%d %H:%M:%S")
cat (DTDownloaded, file=dateFilePath)
} else {
DTDownloaded <- scan(file=dateFilePath, what="character", sep="\n")
}
filePath <- file.path(dataDir, "activity.csv")
if(!file.exists(filePath)) {
unzip (zipFilePath, exdir=dataDir)
}
dataset <- read.csv(filePath, header = TRUE)
cat ("The dataset is located at", filePath, "and was downloaded on", DTDownloaded)
View(dataset)
str(dataset)
dataset$date <- as.Date(dataset$date)
str(dataset)
dataset$minute <- dataset$interval %% 100
dataset$hour <- dataset$interval %/% 100
dataset$elapsed <- dataset$hour * 60 + dataset$minute
dataset$sInterval <- as.factor(sprintf("%02d:%02d", dataset$hour, dataset$minute))
dataset$interval <- dataset$interval / 100
view(dataset)
View(dataset)
dataset$Interval <- as.factor(sprintf("%02d:%02d", dataset$hour, dataset$minute))
dataset$interval <- as.factor(sprintf("%02d:%02d", dataset$hour, dataset$minute))
dataset$interval <- dataset$interval / 100
View(dataset)
View(dataset)
View(dataset)
baseDir <- "."
dataDir <- file.path(baseDir, "data")
if(!file.exists(dataDir)) { dir.create(dataDir) }
zipFilePath <- file.path(dataDir, "activity.zip")
dateFilePath <- file.path(dataDir, "date_time_downloaded.txt")
if(!file.exists(zipFilePath)) {
zipFileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file (zipFileUrl, zipFilePath)
DTDownloaded <- format(Sys.time(), "%Y-%b-%d %H:%M:%S")
cat (DTDownloaded, file=dateFilePath)
} else {
DTDownloaded <- scan(file=dateFilePath, what="character", sep="\n")
}
filePath <- file.path(dataDir, "activity.csv")
if(!file.exists(filePath)) {
unzip (zipFilePath, exdir=dataDir)
}
dataset <- read.csv(filePath, header = TRUE)
cat ("The dataset is located at", filePath, "and was downloaded on", DTDownloaded)
View(dataset)
str(dataset)
dataset$date <- as.Date(dataset$date)
str(dataset)
dataset$minute <- dataset$interval %% 100
dataset$hour <- dataset$interval %/% 100
dataset$elapsed <- dataset$hour * 60 + dataset$minute
dataset$interval <- as.factor(sprintf("%02d:%02d", dataset$hour, dataset$minute))
dataset$interval <- dataset$interval / 100
View(dataset)
str(dataset)
sumStepsPerDay <- aggregate(steps ~ date, data=dataset, FUN="sum", na.exclude=T)
meanStepsPerInterval <- aggregate(steps ~ interval, data=dataset, FUN="mean", na.exclude=T)
dataset$sInterval <- as.factor(sprintf("%02d:%02d", dataset$hour, dataset$minute))
dataset$interval <- dataset$interval / 100
View(dataset)
str(dataset)
sumStepsPerDay <- aggregate(steps ~ date, data=dataset, FUN="sum", na.exclude=T)
meanStepsPerInterval <- aggregate(steps ~ sInterval, data=dataset, FUN="mean", na.exclude=T)
View(sumStepsPerDay)
View(meanStepsPerInterval)
histogram(sumStepsPerDay$steps,breaks=10,main="Total Steps per Day", xlab="Steps per Day")
library(lattice)
histogram(sumStepsPerDay$steps,breaks=10,main="Total Steps per Day", xlab="Steps per Day")
